
type I18nString {
  languageKeys: [String!]!
  languageTexts: [String!]!
}

type User {
  firstName: String!
  lastName: String!
  bio: String
  permissions: [Permission!]!
  schemeVersion: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Permission {
  permissionType: PermissionType!
  allowedEntities: [ID!]!
}

enum PermissionType {
  READ
  CHANGEMASTERDATA
  CREATEINTERVENTIONS
  EXECUTESURVEYS
  CREATESUBENTITIES
  ADMIN
}

type Config {
  name: String!
  colorTheme: ColorTheme
  schemeVersion: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type ColorTheme {
  highlight: String
  secondaryHighlight: String
  backgroundOneLight: String
  backgroundTwoLight: String
  backgroundOneDark: String
  backgroundTwoDark: String
}

type Level {
  name: I18nString!
  description: I18nString!
  parentLevelID: ID
  interventionsAreAllowed: Boolean!
  allowedInterventions(filter: ModelInterventionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelInterventionConnection
  customData: [CustomData!]!
  schemeVersion: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type CustomData {
  id: ID!
  name: I18nString!
  type: Type!
}

enum Type {
  INT
  STRING
}

type Intervention {
  name: I18nString!
  description: I18nString!
  interventionType: InterventionType!
  contents(filter: ModelInterventionContentRelationFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelInterventionContentRelationConnection
  surveys(filter: ModelSurveyFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSurveyConnection
  tags(filter: ModelInterventionTagFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelInterventionTagConnection
  schemeVersion: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  levelAllowedInterventionsId: ID
}

enum InterventionType {
  TECHNOLOGY
  EDUCATION
}

type Content {
  name: I18nString!
  description: I18nString!
  interventions(filter: ModelInterventionContentRelationFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelInterventionContentRelationConnection
  tags(filter: ModelContentTagFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelContentTagConnection
  schemeVersion: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Survey {
  name: I18nString!
  description: I18nString!
  intervention: Intervention
  questions: [Question!]!
  tags(filter: ModelSurveyTagFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSurveyTagConnection
  surveyType: SurveyType!
  schemeVersion: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  interventionSurveysId: ID!
}

enum SurveyType {
  INITIAL
  DEFAULT
}

enum QuestionType {
  TEXT
  SINGLECHOICE
  MULTIPLECHOICE
  PICTURE
  PICTUREWITHTAGS
  AUDIO
}

type Question {
  id: ID!
  text: I18nString!
  type: QuestionType!
  questionOptions: [QuestionOption!]
  isFollowUpQuestion: Boolean!
}

type QuestionOption {
  id: ID!
  text: I18nString!
  followUpQuestionID: ID
}

type Entity {
  name: I18nString!
  description: I18nString!
  parentEntityID: ID
  level: Level!
  location: Location
  customData: [AppliedCustomData]!
  appliedInterventions(filter: ModelAppliedInterventionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAppliedInterventionConnection
  schemeVersion: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  entityLevelId: ID!
}

type Location {
  latitude: Float
  longitude: Float
}

type AppliedCustomData {
  customDataID: ID!
  type: Type!
  name: String!
  intValue: Int
  stringValue: String
}

type AppliedIntervention {
  whoDidIt: User!
  intervention: Intervention!
  location: Location
  executedSurveys(filter: ModelExecutedSurveyFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelExecutedSurveyConnection
  schemeVersion: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  entityAppliedInterventionsId: ID!
  appliedInterventionWhoDidItId: ID!
  appliedInterventionInterventionId: ID!
}

type ExecutedSurvey {
  appliedIntervention: AppliedIntervention!
  survey: Survey!
  whoExecutedIt: User!
  date: AWSDateTime!
  location: Location
  answers: [QuestionAnswer!]!
  schemeVersion: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  appliedInterventionExecutedSurveysId: ID!
  executedSurveySurveyId: ID!
  executedSurveyWhoExecutedItId: ID!
}

type QuestionAnswer {
  id: ID!
  questionID: ID!
  date: AWSDateTime!
  type: QuestionType!
  text: String
  questionOptions: [QuestionOption!]
  markings: [Marking!]
}

type Marking {
  x: Float!
  y: Float!
  rx: Float!
  ry: Float!
  text: String!
}

type Task {
  title: String!
  text: String
  dueDate: AWSDateTime
  finishedDate: AWSDateTime
  location: Location
  user: User!
  entity: Entity
  appliedIntervention: AppliedIntervention
  executedSurvey: ExecutedSurvey
  schemeVersion: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  taskUserId: ID!
  taskEntityId: ID
  taskAppliedInterventionId: ID
  taskExecutedSurveyId: ID
}

type ContentTag {
  text: I18nString!
  schemeVersion: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  contentTagsId: ID!
}

type InterventionTag {
  text: I18nString!
  schemeVersion: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  interventionTagsId: ID!
}

type SurveyTag {
  text: I18nString!
  schemeVersion: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  surveyTagsId: ID!
}

type SessionData {
  date: AWSDateTime!
  userID: String
  app: String
  version: String
  buildNumber: String
  remoteConfig: String
  platform: String
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type InterventionContentRelation {
  id: ID!
  interventionID: ID!
  contentID: ID!
  intervention: Intervention!
  content: Content!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input PermissionInput {
  permissionType: PermissionType!
  allowedEntities: [ID!]!
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  firstName: ModelStringInput
  lastName: ModelStringInput
  bio: ModelStringInput
  schemeVersion: ModelIntInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection
  getConfig(id: ID!): Config
  listConfigs(filter: ModelConfigFilterInput, limit: Int, nextToken: String): ModelConfigConnection
  syncConfigs(filter: ModelConfigFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelConfigConnection
  getLevel(id: ID!): Level
  listLevels(filter: ModelLevelFilterInput, limit: Int, nextToken: String): ModelLevelConnection
  syncLevels(filter: ModelLevelFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelLevelConnection
  getIntervention(id: ID!): Intervention
  listInterventions(filter: ModelInterventionFilterInput, limit: Int, nextToken: String): ModelInterventionConnection
  syncInterventions(filter: ModelInterventionFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelInterventionConnection
  getContent(id: ID!): Content
  listContents(filter: ModelContentFilterInput, limit: Int, nextToken: String): ModelContentConnection
  syncContents(filter: ModelContentFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelContentConnection
  getSurvey(id: ID!): Survey
  listSurveys(filter: ModelSurveyFilterInput, limit: Int, nextToken: String): ModelSurveyConnection
  syncSurveys(filter: ModelSurveyFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelSurveyConnection
  getEntity(id: ID!): Entity
  listEntities(filter: ModelEntityFilterInput, limit: Int, nextToken: String): ModelEntityConnection
  syncEntities(filter: ModelEntityFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelEntityConnection
  getAppliedIntervention(id: ID!): AppliedIntervention
  listAppliedInterventions(filter: ModelAppliedInterventionFilterInput, limit: Int, nextToken: String): ModelAppliedInterventionConnection
  syncAppliedInterventions(filter: ModelAppliedInterventionFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelAppliedInterventionConnection
  getExecutedSurvey(id: ID!): ExecutedSurvey
  listExecutedSurveys(filter: ModelExecutedSurveyFilterInput, limit: Int, nextToken: String): ModelExecutedSurveyConnection
  syncExecutedSurveys(filter: ModelExecutedSurveyFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelExecutedSurveyConnection
  getTask(id: ID!): Task
  listTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String): ModelTaskConnection
  syncTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTaskConnection
  getContentTag(id: ID!): ContentTag
  listContentTags(filter: ModelContentTagFilterInput, limit: Int, nextToken: String): ModelContentTagConnection
  syncContentTags(filter: ModelContentTagFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelContentTagConnection
  getInterventionTag(id: ID!): InterventionTag
  listInterventionTags(filter: ModelInterventionTagFilterInput, limit: Int, nextToken: String): ModelInterventionTagConnection
  syncInterventionTags(filter: ModelInterventionTagFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelInterventionTagConnection
  getSurveyTag(id: ID!): SurveyTag
  listSurveyTags(filter: ModelSurveyTagFilterInput, limit: Int, nextToken: String): ModelSurveyTagConnection
  syncSurveyTags(filter: ModelSurveyTagFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelSurveyTagConnection
  getSessionData(id: ID!): SessionData
  listSessionData(filter: ModelSessionDataFilterInput, limit: Int, nextToken: String): ModelSessionDataConnection
  syncSessionData(filter: ModelSessionDataFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelSessionDataConnection
  getInterventionContentRelation(id: ID!): InterventionContentRelation
  listInterventionContentRelations(filter: ModelInterventionContentRelationFilterInput, limit: Int, nextToken: String): ModelInterventionContentRelationConnection
  syncInterventionContentRelations(filter: ModelInterventionContentRelationFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelInterventionContentRelationConnection
}

input ModelUserConditionInput {
  firstName: ModelStringInput
  lastName: ModelStringInput
  bio: ModelStringInput
  schemeVersion: ModelIntInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  bio: String
  permissions: [PermissionInput!]!
  schemeVersion: Int
  id: ID
  _version: Int
}

input UpdateUserInput {
  firstName: String
  lastName: String
  bio: String
  permissions: [PermissionInput!]
  schemeVersion: Int
  id: ID!
  _version: Int
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createConfig(input: CreateConfigInput!, condition: ModelConfigConditionInput): Config
  updateConfig(input: UpdateConfigInput!, condition: ModelConfigConditionInput): Config
  deleteConfig(input: DeleteConfigInput!, condition: ModelConfigConditionInput): Config
  createLevel(input: CreateLevelInput!, condition: ModelLevelConditionInput): Level
  updateLevel(input: UpdateLevelInput!, condition: ModelLevelConditionInput): Level
  deleteLevel(input: DeleteLevelInput!, condition: ModelLevelConditionInput): Level
  createIntervention(input: CreateInterventionInput!, condition: ModelInterventionConditionInput): Intervention
  updateIntervention(input: UpdateInterventionInput!, condition: ModelInterventionConditionInput): Intervention
  deleteIntervention(input: DeleteInterventionInput!, condition: ModelInterventionConditionInput): Intervention
  createContent(input: CreateContentInput!, condition: ModelContentConditionInput): Content
  updateContent(input: UpdateContentInput!, condition: ModelContentConditionInput): Content
  deleteContent(input: DeleteContentInput!, condition: ModelContentConditionInput): Content
  createSurvey(input: CreateSurveyInput!, condition: ModelSurveyConditionInput): Survey
  updateSurvey(input: UpdateSurveyInput!, condition: ModelSurveyConditionInput): Survey
  deleteSurvey(input: DeleteSurveyInput!, condition: ModelSurveyConditionInput): Survey
  createEntity(input: CreateEntityInput!, condition: ModelEntityConditionInput): Entity
  updateEntity(input: UpdateEntityInput!, condition: ModelEntityConditionInput): Entity
  deleteEntity(input: DeleteEntityInput!, condition: ModelEntityConditionInput): Entity
  createAppliedIntervention(input: CreateAppliedInterventionInput!, condition: ModelAppliedInterventionConditionInput): AppliedIntervention
  updateAppliedIntervention(input: UpdateAppliedInterventionInput!, condition: ModelAppliedInterventionConditionInput): AppliedIntervention
  deleteAppliedIntervention(input: DeleteAppliedInterventionInput!, condition: ModelAppliedInterventionConditionInput): AppliedIntervention
  createExecutedSurvey(input: CreateExecutedSurveyInput!, condition: ModelExecutedSurveyConditionInput): ExecutedSurvey
  updateExecutedSurvey(input: UpdateExecutedSurveyInput!, condition: ModelExecutedSurveyConditionInput): ExecutedSurvey
  deleteExecutedSurvey(input: DeleteExecutedSurveyInput!, condition: ModelExecutedSurveyConditionInput): ExecutedSurvey
  createTask(input: CreateTaskInput!, condition: ModelTaskConditionInput): Task
  updateTask(input: UpdateTaskInput!, condition: ModelTaskConditionInput): Task
  deleteTask(input: DeleteTaskInput!, condition: ModelTaskConditionInput): Task
  createContentTag(input: CreateContentTagInput!, condition: ModelContentTagConditionInput): ContentTag
  updateContentTag(input: UpdateContentTagInput!, condition: ModelContentTagConditionInput): ContentTag
  deleteContentTag(input: DeleteContentTagInput!, condition: ModelContentTagConditionInput): ContentTag
  createInterventionTag(input: CreateInterventionTagInput!, condition: ModelInterventionTagConditionInput): InterventionTag
  updateInterventionTag(input: UpdateInterventionTagInput!, condition: ModelInterventionTagConditionInput): InterventionTag
  deleteInterventionTag(input: DeleteInterventionTagInput!, condition: ModelInterventionTagConditionInput): InterventionTag
  createSurveyTag(input: CreateSurveyTagInput!, condition: ModelSurveyTagConditionInput): SurveyTag
  updateSurveyTag(input: UpdateSurveyTagInput!, condition: ModelSurveyTagConditionInput): SurveyTag
  deleteSurveyTag(input: DeleteSurveyTagInput!, condition: ModelSurveyTagConditionInput): SurveyTag
  createSessionData(input: CreateSessionDataInput!, condition: ModelSessionDataConditionInput): SessionData
  updateSessionData(input: UpdateSessionDataInput!, condition: ModelSessionDataConditionInput): SessionData
  deleteSessionData(input: DeleteSessionDataInput!, condition: ModelSessionDataConditionInput): SessionData
  createInterventionContentRelation(input: CreateInterventionContentRelationInput!, condition: ModelInterventionContentRelationConditionInput): InterventionContentRelation
  updateInterventionContentRelation(input: UpdateInterventionContentRelationInput!, condition: ModelInterventionContentRelationConditionInput): InterventionContentRelation
  deleteInterventionContentRelation(input: DeleteInterventionContentRelationInput!, condition: ModelInterventionContentRelationConditionInput): InterventionContentRelation
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateConfig: Config @aws_subscribe(mutations: ["createConfig"])
  onUpdateConfig: Config @aws_subscribe(mutations: ["updateConfig"])
  onDeleteConfig: Config @aws_subscribe(mutations: ["deleteConfig"])
  onCreateLevel: Level @aws_subscribe(mutations: ["createLevel"])
  onUpdateLevel: Level @aws_subscribe(mutations: ["updateLevel"])
  onDeleteLevel: Level @aws_subscribe(mutations: ["deleteLevel"])
  onCreateIntervention: Intervention @aws_subscribe(mutations: ["createIntervention"])
  onUpdateIntervention: Intervention @aws_subscribe(mutations: ["updateIntervention"])
  onDeleteIntervention: Intervention @aws_subscribe(mutations: ["deleteIntervention"])
  onCreateContent: Content @aws_subscribe(mutations: ["createContent"])
  onUpdateContent: Content @aws_subscribe(mutations: ["updateContent"])
  onDeleteContent: Content @aws_subscribe(mutations: ["deleteContent"])
  onCreateSurvey: Survey @aws_subscribe(mutations: ["createSurvey"])
  onUpdateSurvey: Survey @aws_subscribe(mutations: ["updateSurvey"])
  onDeleteSurvey: Survey @aws_subscribe(mutations: ["deleteSurvey"])
  onCreateEntity: Entity @aws_subscribe(mutations: ["createEntity"])
  onUpdateEntity: Entity @aws_subscribe(mutations: ["updateEntity"])
  onDeleteEntity: Entity @aws_subscribe(mutations: ["deleteEntity"])
  onCreateAppliedIntervention: AppliedIntervention @aws_subscribe(mutations: ["createAppliedIntervention"])
  onUpdateAppliedIntervention: AppliedIntervention @aws_subscribe(mutations: ["updateAppliedIntervention"])
  onDeleteAppliedIntervention: AppliedIntervention @aws_subscribe(mutations: ["deleteAppliedIntervention"])
  onCreateExecutedSurvey: ExecutedSurvey @aws_subscribe(mutations: ["createExecutedSurvey"])
  onUpdateExecutedSurvey: ExecutedSurvey @aws_subscribe(mutations: ["updateExecutedSurvey"])
  onDeleteExecutedSurvey: ExecutedSurvey @aws_subscribe(mutations: ["deleteExecutedSurvey"])
  onCreateTask: Task @aws_subscribe(mutations: ["createTask"])
  onUpdateTask: Task @aws_subscribe(mutations: ["updateTask"])
  onDeleteTask: Task @aws_subscribe(mutations: ["deleteTask"])
  onCreateContentTag: ContentTag @aws_subscribe(mutations: ["createContentTag"])
  onUpdateContentTag: ContentTag @aws_subscribe(mutations: ["updateContentTag"])
  onDeleteContentTag: ContentTag @aws_subscribe(mutations: ["deleteContentTag"])
  onCreateInterventionTag: InterventionTag @aws_subscribe(mutations: ["createInterventionTag"])
  onUpdateInterventionTag: InterventionTag @aws_subscribe(mutations: ["updateInterventionTag"])
  onDeleteInterventionTag: InterventionTag @aws_subscribe(mutations: ["deleteInterventionTag"])
  onCreateSurveyTag: SurveyTag @aws_subscribe(mutations: ["createSurveyTag"])
  onUpdateSurveyTag: SurveyTag @aws_subscribe(mutations: ["updateSurveyTag"])
  onDeleteSurveyTag: SurveyTag @aws_subscribe(mutations: ["deleteSurveyTag"])
  onCreateSessionData: SessionData @aws_subscribe(mutations: ["createSessionData"])
  onUpdateSessionData: SessionData @aws_subscribe(mutations: ["updateSessionData"])
  onDeleteSessionData: SessionData @aws_subscribe(mutations: ["deleteSessionData"])
  onCreateInterventionContentRelation: InterventionContentRelation @aws_subscribe(mutations: ["createInterventionContentRelation"])
  onUpdateInterventionContentRelation: InterventionContentRelation @aws_subscribe(mutations: ["updateInterventionContentRelation"])
  onDeleteInterventionContentRelation: InterventionContentRelation @aws_subscribe(mutations: ["deleteInterventionContentRelation"])
}

input ColorThemeInput {
  highlight: String
  secondaryHighlight: String
  backgroundOneLight: String
  backgroundTwoLight: String
  backgroundOneDark: String
  backgroundTwoDark: String
}

type ModelConfigConnection {
  items: [Config]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelConfigFilterInput {
  name: ModelStringInput
  schemeVersion: ModelIntInput
  and: [ModelConfigFilterInput]
  or: [ModelConfigFilterInput]
  not: ModelConfigFilterInput
}

input ModelConfigConditionInput {
  name: ModelStringInput
  schemeVersion: ModelIntInput
  and: [ModelConfigConditionInput]
  or: [ModelConfigConditionInput]
  not: ModelConfigConditionInput
}

input CreateConfigInput {
  name: String!
  colorTheme: ColorThemeInput
  schemeVersion: Int
  id: ID
  _version: Int
}

input UpdateConfigInput {
  name: String
  colorTheme: ColorThemeInput
  schemeVersion: Int
  id: ID!
  _version: Int
}

input DeleteConfigInput {
  id: ID!
  _version: Int
}

input I18nStringInput {
  languageKeys: [String!]!
  languageTexts: [String!]!
}

input CustomDataInput {
  id: ID
  name: I18nStringInput!
  type: Type!
}

type ModelLevelConnection {
  items: [Level]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelLevelFilterInput {
  parentLevelID: ModelIDInput
  interventionsAreAllowed: ModelBooleanInput
  schemeVersion: ModelIntInput
  and: [ModelLevelFilterInput]
  or: [ModelLevelFilterInput]
  not: ModelLevelFilterInput
}

input ModelLevelConditionInput {
  parentLevelID: ModelIDInput
  interventionsAreAllowed: ModelBooleanInput
  schemeVersion: ModelIntInput
  and: [ModelLevelConditionInput]
  or: [ModelLevelConditionInput]
  not: ModelLevelConditionInput
}

input CreateLevelInput {
  name: I18nStringInput!
  description: I18nStringInput!
  parentLevelID: ID
  interventionsAreAllowed: Boolean!
  customData: [CustomDataInput!]!
  schemeVersion: Int
  id: ID
  _version: Int
}

input UpdateLevelInput {
  name: I18nStringInput
  description: I18nStringInput
  parentLevelID: ID
  interventionsAreAllowed: Boolean
  customData: [CustomDataInput!]
  schemeVersion: Int
  id: ID!
  _version: Int
}

input DeleteLevelInput {
  id: ID!
  _version: Int
}

type ModelInterventionConnection {
  items: [Intervention]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelInterventionTypeInput {
  eq: InterventionType
  ne: InterventionType
}

input ModelInterventionFilterInput {
  interventionType: ModelInterventionTypeInput
  schemeVersion: ModelIntInput
  and: [ModelInterventionFilterInput]
  or: [ModelInterventionFilterInput]
  not: ModelInterventionFilterInput
  levelAllowedInterventionsId: ModelIDInput
}

input ModelInterventionConditionInput {
  interventionType: ModelInterventionTypeInput
  schemeVersion: ModelIntInput
  and: [ModelInterventionConditionInput]
  or: [ModelInterventionConditionInput]
  not: ModelInterventionConditionInput
  levelAllowedInterventionsId: ModelIDInput
}

input CreateInterventionInput {
  name: I18nStringInput!
  description: I18nStringInput!
  interventionType: InterventionType!
  schemeVersion: Int
  id: ID
  _version: Int
  levelAllowedInterventionsId: ID
}

input UpdateInterventionInput {
  name: I18nStringInput
  description: I18nStringInput
  interventionType: InterventionType
  schemeVersion: Int
  id: ID!
  _version: Int
  levelAllowedInterventionsId: ID
}

input DeleteInterventionInput {
  id: ID!
  _version: Int
}

type ModelContentConnection {
  items: [Content]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelContentFilterInput {
  schemeVersion: ModelIntInput
  and: [ModelContentFilterInput]
  or: [ModelContentFilterInput]
  not: ModelContentFilterInput
}

input ModelContentConditionInput {
  schemeVersion: ModelIntInput
  and: [ModelContentConditionInput]
  or: [ModelContentConditionInput]
  not: ModelContentConditionInput
}

input CreateContentInput {
  name: I18nStringInput!
  description: I18nStringInput!
  schemeVersion: Int
  id: ID
  _version: Int
}

input UpdateContentInput {
  name: I18nStringInput
  description: I18nStringInput
  schemeVersion: Int
  id: ID!
  _version: Int
}

input DeleteContentInput {
  id: ID!
  _version: Int
}

input QuestionInput {
  id: ID
  text: I18nStringInput!
  type: QuestionType!
  questionOptions: [QuestionOptionInput!]
  isFollowUpQuestion: Boolean!
}

input QuestionOptionInput {
  id: ID
  text: I18nStringInput!
  followUpQuestionID: ID
}

type ModelSurveyConnection {
  items: [Survey]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelSurveyTypeInput {
  eq: SurveyType
  ne: SurveyType
}

input ModelSurveyFilterInput {
  surveyType: ModelSurveyTypeInput
  schemeVersion: ModelIntInput
  and: [ModelSurveyFilterInput]
  or: [ModelSurveyFilterInput]
  not: ModelSurveyFilterInput
  interventionSurveysId: ModelIDInput
}

input ModelSurveyConditionInput {
  surveyType: ModelSurveyTypeInput
  schemeVersion: ModelIntInput
  and: [ModelSurveyConditionInput]
  or: [ModelSurveyConditionInput]
  not: ModelSurveyConditionInput
  interventionSurveysId: ModelIDInput
}

input CreateSurveyInput {
  name: I18nStringInput!
  description: I18nStringInput!
  questions: [QuestionInput!]!
  surveyType: SurveyType!
  schemeVersion: Int
  id: ID
  _version: Int
  interventionSurveysId: ID!
}

input UpdateSurveyInput {
  name: I18nStringInput
  description: I18nStringInput
  questions: [QuestionInput!]
  surveyType: SurveyType
  schemeVersion: Int
  id: ID!
  _version: Int
  interventionSurveysId: ID
}

input DeleteSurveyInput {
  id: ID!
  _version: Int
}

input LocationInput {
  latitude: Float
  longitude: Float
}

input AppliedCustomDataInput {
  customDataID: ID!
  type: Type!
  name: String!
  intValue: Int
  stringValue: String
}

type ModelEntityConnection {
  items: [Entity]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelEntityFilterInput {
  parentEntityID: ModelIDInput
  schemeVersion: ModelIntInput
  and: [ModelEntityFilterInput]
  or: [ModelEntityFilterInput]
  not: ModelEntityFilterInput
  entityLevelId: ModelIDInput
}

input ModelEntityConditionInput {
  parentEntityID: ModelIDInput
  schemeVersion: ModelIntInput
  and: [ModelEntityConditionInput]
  or: [ModelEntityConditionInput]
  not: ModelEntityConditionInput
  entityLevelId: ModelIDInput
}

input CreateEntityInput {
  name: I18nStringInput!
  description: I18nStringInput!
  parentEntityID: ID
  location: LocationInput
  customData: [AppliedCustomDataInput]!
  schemeVersion: Int
  id: ID
  _version: Int
  entityLevelId: ID!
}

input UpdateEntityInput {
  name: I18nStringInput
  description: I18nStringInput
  parentEntityID: ID
  location: LocationInput
  customData: [AppliedCustomDataInput]
  schemeVersion: Int
  id: ID!
  _version: Int
  entityLevelId: ID
}

input DeleteEntityInput {
  id: ID!
  _version: Int
}

type ModelAppliedInterventionConnection {
  items: [AppliedIntervention]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelAppliedInterventionFilterInput {
  schemeVersion: ModelIntInput
  and: [ModelAppliedInterventionFilterInput]
  or: [ModelAppliedInterventionFilterInput]
  not: ModelAppliedInterventionFilterInput
  entityAppliedInterventionsId: ModelIDInput
  appliedInterventionWhoDidItId: ModelIDInput
  appliedInterventionInterventionId: ModelIDInput
}

input ModelAppliedInterventionConditionInput {
  schemeVersion: ModelIntInput
  and: [ModelAppliedInterventionConditionInput]
  or: [ModelAppliedInterventionConditionInput]
  not: ModelAppliedInterventionConditionInput
  entityAppliedInterventionsId: ModelIDInput
  appliedInterventionWhoDidItId: ModelIDInput
  appliedInterventionInterventionId: ModelIDInput
}

input CreateAppliedInterventionInput {
  location: LocationInput
  schemeVersion: Int
  id: ID
  _version: Int
  entityAppliedInterventionsId: ID!
  appliedInterventionWhoDidItId: ID!
  appliedInterventionInterventionId: ID!
}

input UpdateAppliedInterventionInput {
  location: LocationInput
  schemeVersion: Int
  id: ID!
  _version: Int
  entityAppliedInterventionsId: ID
  appliedInterventionWhoDidItId: ID
  appliedInterventionInterventionId: ID
}

input DeleteAppliedInterventionInput {
  id: ID!
  _version: Int
}

input QuestionAnswerInput {
  id: ID
  questionID: ID!
  date: AWSDateTime!
  type: QuestionType!
  text: String
  questionOptions: [QuestionOptionInput!]
  markings: [MarkingInput!]
}

input MarkingInput {
  x: Float!
  y: Float!
  rx: Float!
  ry: Float!
  text: String!
}

type ModelExecutedSurveyConnection {
  items: [ExecutedSurvey]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelExecutedSurveyFilterInput {
  date: ModelStringInput
  schemeVersion: ModelIntInput
  and: [ModelExecutedSurveyFilterInput]
  or: [ModelExecutedSurveyFilterInput]
  not: ModelExecutedSurveyFilterInput
  appliedInterventionExecutedSurveysId: ModelIDInput
  executedSurveySurveyId: ModelIDInput
  executedSurveyWhoExecutedItId: ModelIDInput
}

input ModelExecutedSurveyConditionInput {
  date: ModelStringInput
  schemeVersion: ModelIntInput
  and: [ModelExecutedSurveyConditionInput]
  or: [ModelExecutedSurveyConditionInput]
  not: ModelExecutedSurveyConditionInput
  appliedInterventionExecutedSurveysId: ModelIDInput
  executedSurveySurveyId: ModelIDInput
  executedSurveyWhoExecutedItId: ModelIDInput
}

input CreateExecutedSurveyInput {
  date: AWSDateTime!
  location: LocationInput
  answers: [QuestionAnswerInput!]!
  schemeVersion: Int
  id: ID
  _version: Int
  appliedInterventionExecutedSurveysId: ID!
  executedSurveySurveyId: ID!
  executedSurveyWhoExecutedItId: ID!
}

input UpdateExecutedSurveyInput {
  date: AWSDateTime
  location: LocationInput
  answers: [QuestionAnswerInput!]
  schemeVersion: Int
  id: ID!
  _version: Int
  appliedInterventionExecutedSurveysId: ID
  executedSurveySurveyId: ID
  executedSurveyWhoExecutedItId: ID
}

input DeleteExecutedSurveyInput {
  id: ID!
  _version: Int
}

type ModelTaskConnection {
  items: [Task]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelTaskFilterInput {
  title: ModelStringInput
  text: ModelStringInput
  dueDate: ModelStringInput
  finishedDate: ModelStringInput
  schemeVersion: ModelIntInput
  and: [ModelTaskFilterInput]
  or: [ModelTaskFilterInput]
  not: ModelTaskFilterInput
  taskUserId: ModelIDInput
  taskEntityId: ModelIDInput
  taskAppliedInterventionId: ModelIDInput
  taskExecutedSurveyId: ModelIDInput
}

input ModelTaskConditionInput {
  title: ModelStringInput
  text: ModelStringInput
  dueDate: ModelStringInput
  finishedDate: ModelStringInput
  schemeVersion: ModelIntInput
  and: [ModelTaskConditionInput]
  or: [ModelTaskConditionInput]
  not: ModelTaskConditionInput
  taskUserId: ModelIDInput
  taskEntityId: ModelIDInput
  taskAppliedInterventionId: ModelIDInput
  taskExecutedSurveyId: ModelIDInput
}

input CreateTaskInput {
  title: String!
  text: String
  dueDate: AWSDateTime
  finishedDate: AWSDateTime
  location: LocationInput
  schemeVersion: Int
  id: ID
  _version: Int
  taskUserId: ID!
  taskEntityId: ID
  taskAppliedInterventionId: ID
  taskExecutedSurveyId: ID
}

input UpdateTaskInput {
  title: String
  text: String
  dueDate: AWSDateTime
  finishedDate: AWSDateTime
  location: LocationInput
  schemeVersion: Int
  id: ID!
  _version: Int
  taskUserId: ID
  taskEntityId: ID
  taskAppliedInterventionId: ID
  taskExecutedSurveyId: ID
}

input DeleteTaskInput {
  id: ID!
  _version: Int
}

type ModelContentTagConnection {
  items: [ContentTag]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelContentTagFilterInput {
  schemeVersion: ModelIntInput
  and: [ModelContentTagFilterInput]
  or: [ModelContentTagFilterInput]
  not: ModelContentTagFilterInput
  contentTagsId: ModelIDInput
}

input ModelContentTagConditionInput {
  schemeVersion: ModelIntInput
  and: [ModelContentTagConditionInput]
  or: [ModelContentTagConditionInput]
  not: ModelContentTagConditionInput
  contentTagsId: ModelIDInput
}

input CreateContentTagInput {
  text: I18nStringInput!
  schemeVersion: Int
  id: ID
  _version: Int
  contentTagsId: ID!
}

input UpdateContentTagInput {
  text: I18nStringInput
  schemeVersion: Int
  id: ID!
  _version: Int
  contentTagsId: ID
}

input DeleteContentTagInput {
  id: ID!
  _version: Int
}

type ModelInterventionTagConnection {
  items: [InterventionTag]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelInterventionTagFilterInput {
  schemeVersion: ModelIntInput
  and: [ModelInterventionTagFilterInput]
  or: [ModelInterventionTagFilterInput]
  not: ModelInterventionTagFilterInput
  interventionTagsId: ModelIDInput
}

input ModelInterventionTagConditionInput {
  schemeVersion: ModelIntInput
  and: [ModelInterventionTagConditionInput]
  or: [ModelInterventionTagConditionInput]
  not: ModelInterventionTagConditionInput
  interventionTagsId: ModelIDInput
}

input CreateInterventionTagInput {
  text: I18nStringInput!
  schemeVersion: Int
  id: ID
  _version: Int
  interventionTagsId: ID!
}

input UpdateInterventionTagInput {
  text: I18nStringInput
  schemeVersion: Int
  id: ID!
  _version: Int
  interventionTagsId: ID
}

input DeleteInterventionTagInput {
  id: ID!
  _version: Int
}

type ModelSurveyTagConnection {
  items: [SurveyTag]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelSurveyTagFilterInput {
  schemeVersion: ModelIntInput
  and: [ModelSurveyTagFilterInput]
  or: [ModelSurveyTagFilterInput]
  not: ModelSurveyTagFilterInput
  surveyTagsId: ModelIDInput
}

input ModelSurveyTagConditionInput {
  schemeVersion: ModelIntInput
  and: [ModelSurveyTagConditionInput]
  or: [ModelSurveyTagConditionInput]
  not: ModelSurveyTagConditionInput
  surveyTagsId: ModelIDInput
}

input CreateSurveyTagInput {
  text: I18nStringInput!
  schemeVersion: Int
  id: ID
  _version: Int
  surveyTagsId: ID!
}

input UpdateSurveyTagInput {
  text: I18nStringInput
  schemeVersion: Int
  id: ID!
  _version: Int
  surveyTagsId: ID
}

input DeleteSurveyTagInput {
  id: ID!
  _version: Int
}

type ModelSessionDataConnection {
  items: [SessionData]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelSessionDataFilterInput {
  date: ModelStringInput
  userID: ModelStringInput
  app: ModelStringInput
  version: ModelStringInput
  buildNumber: ModelStringInput
  remoteConfig: ModelStringInput
  platform: ModelStringInput
  and: [ModelSessionDataFilterInput]
  or: [ModelSessionDataFilterInput]
  not: ModelSessionDataFilterInput
}

input ModelSessionDataConditionInput {
  date: ModelStringInput
  userID: ModelStringInput
  app: ModelStringInput
  version: ModelStringInput
  buildNumber: ModelStringInput
  remoteConfig: ModelStringInput
  platform: ModelStringInput
  and: [ModelSessionDataConditionInput]
  or: [ModelSessionDataConditionInput]
  not: ModelSessionDataConditionInput
}

input CreateSessionDataInput {
  date: AWSDateTime!
  userID: String
  app: String
  version: String
  buildNumber: String
  remoteConfig: String
  platform: String
  id: ID
  _version: Int
}

input UpdateSessionDataInput {
  date: AWSDateTime
  userID: String
  app: String
  version: String
  buildNumber: String
  remoteConfig: String
  platform: String
  id: ID!
  _version: Int
}

input DeleteSessionDataInput {
  id: ID!
  _version: Int
}

type ModelInterventionContentRelationConnection {
  items: [InterventionContentRelation]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelInterventionContentRelationFilterInput {
  id: ModelIDInput
  interventionID: ModelIDInput
  contentID: ModelIDInput
  and: [ModelInterventionContentRelationFilterInput]
  or: [ModelInterventionContentRelationFilterInput]
  not: ModelInterventionContentRelationFilterInput
}

input ModelInterventionContentRelationConditionInput {
  interventionID: ModelIDInput
  contentID: ModelIDInput
  and: [ModelInterventionContentRelationConditionInput]
  or: [ModelInterventionContentRelationConditionInput]
  not: ModelInterventionContentRelationConditionInput
}

input CreateInterventionContentRelationInput {
  id: ID
  interventionID: ID!
  contentID: ID!
  _version: Int
}

input UpdateInterventionContentRelationInput {
  id: ID!
  interventionID: ID
  contentID: ID
  _version: Int
}

input DeleteInterventionContentRelationInput {
  id: ID!
  _version: Int
}

input ModelIDKeyConditionInput {
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  between: [ID]
  beginsWith: ID
}

